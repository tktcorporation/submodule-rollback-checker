name: 'submodule-rollback-checker'
description: 'Checks if submodule commits have been rolled back in a pull request.'
author: 'tktcorporation'
branding:
  icon: 'git-merge'
  color: 'yellow'

inputs:
  token:
    description: 'A token (e.g., GitHub PAT or GITHUB_TOKEN) with permission to read submodules.'
    required: true

outputs:
  has_warning:
    description: 'true if a submodule rollback is detected, otherwise false.'

runs:
  using: 'composite'
  steps:
    - name: Extract PR info
      run: |
        base_sha=$(jq -r .pull_request.base.sha $GITHUB_EVENT_PATH)
        head_sha=$(jq -r .pull_request.head.sha $GITHUB_EVENT_PATH)
        issue_number=$(jq -r .pull_request.number $GITHUB_EVENT_PATH)

        echo "base_sha=$base_sha" >> $GITHUB_OUTPUT
        echo "head_sha=$head_sha" >> $GITHUB_OUTPUT
        echo "issue_number=$issue_number" >> $GITHUB_OUTPUT

    - name: Checkout HEAD commit (PR head)
      uses: actions/checkout@v4
      with:
        token: ${{ inputs.token }}
        ref: ${{ steps.extract_pr_info.outputs.head_sha }}
        submodules: 'recursive'
        fetch-depth: 0

    - name: Get submodule paths
      id: get_submodule_paths
      run: |
        git config --file .gitmodules --get-regexp path | awk '{ print $2 }' | paste -sd ',' - > submodule_paths.txt
        if [ ! -s submodule_paths.txt ]; then
          echo "::error::No submodules found. Please check the .gitmodules file."
          exit 1
        fi
        echo "submodule_paths=$(cat submodule_paths.txt)" >> "$GITHUB_OUTPUT"

    - name: Record HEAD submodule commits
      id: record_head_submodules
      run: |
        submodule_paths=${{ steps.get_submodule_paths.outputs.submodule_paths }}
        IFS=',' read -r -a paths <<< "$submodule_paths"
        > head_submodules.json
        echo "[" >> head_submodules.json
        for p in "${paths[@]}"; do
          head_hash=$(git -C "$p" rev-parse HEAD)
          submodule_url=$(git -C "$p" remote get-url origin)
          owner=$(echo $submodule_url | cut -d'/' -f4)
          repo=$(echo $submodule_url | cut -d'/' -f5 | sed 's/.git$//')
          echo "{\"path\":\"$p\", \"head_hash\":\"$head_hash\", \"owner\":\"$owner\", \"repo\":\"$repo\"}," >> head_submodules.json
        done
        sed -i '$ s/,$//' head_submodules.json
        echo "]" >> head_submodules.json
        echo "head_data=$(cat head_submodules.json | base64 -w0)" >> "$GITHUB_OUTPUT"

    - name: Checkout base commit
      run: |
        git checkout ${{ steps.extract_pr_info.outputs.base_sha }}
        git submodule update --init --recursive

    - name: Compare submodules
      id: compare_submodules
      run: |
        head_data_decoded=$(echo "${{ steps.record_head_submodules.outputs.head_data }}" | base64 -d)
        echo "$head_data_decoded" > head_submodules.json
        has_warning=false
        > warning.txt
        jq -c '.[]' head_submodules.json | while read sub; do
          path=$(echo "$sub" | jq -r '.path')
          head_hash=$(echo "$sub" | jq -r '.head_hash')
          base_hash=$(git -C "$path" rev-parse HEAD)

          if [ -n "$base_hash" ] && [ -n "$head_hash" ]; then
            git merge-base --is-ancestor "$base_hash" "$head_hash"
            if [ $? -ne 0 ]; then
              has_warning=true
              echo "Submodule \`$path\` has been rolled back!
              Base submodule commit: \`$base_hash\`
              Incoming submodule commit: \`$head_hash\`" >> warning.txt
            fi
          fi
        done

        if [ "$has_warning" = true ]; then
          echo "has_warning=true" >> "$GITHUB_OUTPUT"
        else
          echo "has_warning=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Post warning comment if needed
      if: ${{ steps.compare_submodules.outputs.has_warning == 'true' }}
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.token }}
        script: |
          const fs = require('fs');
          const warning = fs.readFileSync('warning.txt', 'utf8');
          if (warning) {
            github.rest.issues.createComment({
              issue_number: parseInt(${ { steps.extract_pr_info.outputs.issue_number } }),
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `> [!CAUTION]\n> ${warning}`,
            });
          }
